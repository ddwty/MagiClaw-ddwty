// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: magiclaw_msg.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct MagiClaw_Motor: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var angle: Float = 0

  var speed: Float = 0

  var iq: Float = 0

  var temperature: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MagiClaw_Claw: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var angle: Float = 0

  var motor: MagiClaw_Motor {
    get {return _motor ?? MagiClaw_Motor()}
    set {_motor = newValue}
  }
  /// Returns true if `motor` has been explicitly set.
  var hasMotor: Bool {return self._motor != nil}
  /// Clears the value of `motor`. Subsequent reads from it will return its default value.
  mutating func clearMotor() {self._motor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _motor: MagiClaw_Motor? = nil
}

struct MagiClaw_Finger: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var img: Data = Data()

  var pose: [Float] = []

  var force: [Float] = []

  var node: [Float] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MagiClaw_Phone: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var colorImg: Data = Data()

  var depthImg: [Int32] = []

  var depthWidth: Int32 = 0

  var depthHeight: Int32 = 0

  var pose: [Float] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MagiClaw_MagiClaw: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: Float {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  var claw: MagiClaw_Claw {
    get {return _storage._claw ?? MagiClaw_Claw()}
    set {_uniqueStorage()._claw = newValue}
  }
  /// Returns true if `claw` has been explicitly set.
  var hasClaw: Bool {return _storage._claw != nil}
  /// Clears the value of `claw`. Subsequent reads from it will return its default value.
  mutating func clearClaw() {_uniqueStorage()._claw = nil}

  var finger0: MagiClaw_Finger {
    get {return _storage._finger0 ?? MagiClaw_Finger()}
    set {_uniqueStorage()._finger0 = newValue}
  }
  /// Returns true if `finger0` has been explicitly set.
  var hasFinger0: Bool {return _storage._finger0 != nil}
  /// Clears the value of `finger0`. Subsequent reads from it will return its default value.
  mutating func clearFinger0() {_uniqueStorage()._finger0 = nil}

  var finger1: MagiClaw_Finger {
    get {return _storage._finger1 ?? MagiClaw_Finger()}
    set {_uniqueStorage()._finger1 = newValue}
  }
  /// Returns true if `finger1` has been explicitly set.
  var hasFinger1: Bool {return _storage._finger1 != nil}
  /// Clears the value of `finger1`. Subsequent reads from it will return its default value.
  mutating func clearFinger1() {_uniqueStorage()._finger1 = nil}

  var phone: MagiClaw_Phone {
    get {return _storage._phone ?? MagiClaw_Phone()}
    set {_uniqueStorage()._phone = newValue}
  }
  /// Returns true if `phone` has been explicitly set.
  var hasPhone: Bool {return _storage._phone != nil}
  /// Clears the value of `phone`. Subsequent reads from it will return its default value.
  mutating func clearPhone() {_uniqueStorage()._phone = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "MagiClaw"

extension MagiClaw_Motor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Motor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "angle"),
    2: .same(proto: "speed"),
    3: .same(proto: "iq"),
    4: .same(proto: "temperature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.angle) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.speed) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.iq) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.temperature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.angle.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.angle, fieldNumber: 1)
    }
    if self.speed.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.speed, fieldNumber: 2)
    }
    if self.iq.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.iq, fieldNumber: 3)
    }
    if self.temperature != 0 {
      try visitor.visitSingularInt32Field(value: self.temperature, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MagiClaw_Motor, rhs: MagiClaw_Motor) -> Bool {
    if lhs.angle != rhs.angle {return false}
    if lhs.speed != rhs.speed {return false}
    if lhs.iq != rhs.iq {return false}
    if lhs.temperature != rhs.temperature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MagiClaw_Claw: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Claw"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "angle"),
    2: .same(proto: "motor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.angle) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._motor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.angle.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.angle, fieldNumber: 1)
    }
    try { if let v = self._motor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MagiClaw_Claw, rhs: MagiClaw_Claw) -> Bool {
    if lhs.angle != rhs.angle {return false}
    if lhs._motor != rhs._motor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MagiClaw_Finger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Finger"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "img"),
    2: .same(proto: "pose"),
    3: .same(proto: "force"),
    4: .same(proto: "node"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.img) }()
      case 2: try { try decoder.decodeRepeatedFloatField(value: &self.pose) }()
      case 3: try { try decoder.decodeRepeatedFloatField(value: &self.force) }()
      case 4: try { try decoder.decodeRepeatedFloatField(value: &self.node) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.img.isEmpty {
      try visitor.visitSingularBytesField(value: self.img, fieldNumber: 1)
    }
    if !self.pose.isEmpty {
      try visitor.visitPackedFloatField(value: self.pose, fieldNumber: 2)
    }
    if !self.force.isEmpty {
      try visitor.visitPackedFloatField(value: self.force, fieldNumber: 3)
    }
    if !self.node.isEmpty {
      try visitor.visitPackedFloatField(value: self.node, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MagiClaw_Finger, rhs: MagiClaw_Finger) -> Bool {
    if lhs.img != rhs.img {return false}
    if lhs.pose != rhs.pose {return false}
    if lhs.force != rhs.force {return false}
    if lhs.node != rhs.node {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MagiClaw_Phone: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Phone"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "color_img"),
    2: .standard(proto: "depth_img"),
    3: .standard(proto: "depth_width"),
    4: .standard(proto: "depth_height"),
    5: .same(proto: "pose"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.colorImg) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.depthImg) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.depthWidth) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.depthHeight) }()
      case 5: try { try decoder.decodeRepeatedFloatField(value: &self.pose) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.colorImg.isEmpty {
      try visitor.visitSingularBytesField(value: self.colorImg, fieldNumber: 1)
    }
    if !self.depthImg.isEmpty {
      try visitor.visitPackedInt32Field(value: self.depthImg, fieldNumber: 2)
    }
    if self.depthWidth != 0 {
      try visitor.visitSingularInt32Field(value: self.depthWidth, fieldNumber: 3)
    }
    if self.depthHeight != 0 {
      try visitor.visitSingularInt32Field(value: self.depthHeight, fieldNumber: 4)
    }
    if !self.pose.isEmpty {
      try visitor.visitPackedFloatField(value: self.pose, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MagiClaw_Phone, rhs: MagiClaw_Phone) -> Bool {
    if lhs.colorImg != rhs.colorImg {return false}
    if lhs.depthImg != rhs.depthImg {return false}
    if lhs.depthWidth != rhs.depthWidth {return false}
    if lhs.depthHeight != rhs.depthHeight {return false}
    if lhs.pose != rhs.pose {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MagiClaw_MagiClaw: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MagiClaw"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .same(proto: "claw"),
    3: .standard(proto: "finger_0"),
    4: .standard(proto: "finger_1"),
    5: .same(proto: "phone"),
  ]

  fileprivate class _StorageClass {
    var _timestamp: Float = 0
    var _claw: MagiClaw_Claw? = nil
    var _finger0: MagiClaw_Finger? = nil
    var _finger1: MagiClaw_Finger? = nil
    var _phone: MagiClaw_Phone? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _timestamp = source._timestamp
      _claw = source._claw
      _finger0 = source._finger0
      _finger1 = source._finger1
      _phone = source._phone
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularFloatField(value: &_storage._timestamp) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._claw) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._finger0) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._finger1) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._phone) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._timestamp.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._timestamp, fieldNumber: 1)
      }
      try { if let v = _storage._claw {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._finger0 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._finger1 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._phone {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MagiClaw_MagiClaw, rhs: MagiClaw_MagiClaw) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._claw != rhs_storage._claw {return false}
        if _storage._finger0 != rhs_storage._finger0 {return false}
        if _storage._finger1 != rhs_storage._finger1 {return false}
        if _storage._phone != rhs_storage._phone {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
