// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: phone_msg.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Phone_Phone: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: Float = 0

  var colorImg: Data = Data()

  var depthImg: [Int32] = []

  var depthWidth: Int32 = 0

  var depthHeight: Int32 = 0

  var pose: [Float] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "Phone"

extension Phone_Phone: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Phone"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .standard(proto: "color_img"),
    3: .standard(proto: "depth_img"),
    4: .standard(proto: "depth_width"),
    5: .standard(proto: "depth_height"),
    6: .same(proto: "pose"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.timestamp) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.colorImg) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.depthImg) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.depthWidth) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.depthHeight) }()
      case 6: try { try decoder.decodeRepeatedFloatField(value: &self.pose) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.timestamp, fieldNumber: 1)
    }
    if !self.colorImg.isEmpty {
      try visitor.visitSingularBytesField(value: self.colorImg, fieldNumber: 2)
    }
    if !self.depthImg.isEmpty {
      try visitor.visitPackedInt32Field(value: self.depthImg, fieldNumber: 3)
    }
    if self.depthWidth != 0 {
      try visitor.visitSingularInt32Field(value: self.depthWidth, fieldNumber: 4)
    }
    if self.depthHeight != 0 {
      try visitor.visitSingularInt32Field(value: self.depthHeight, fieldNumber: 5)
    }
    if !self.pose.isEmpty {
      try visitor.visitPackedFloatField(value: self.pose, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Phone_Phone, rhs: Phone_Phone) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.colorImg != rhs.colorImg {return false}
    if lhs.depthImg != rhs.depthImg {return false}
    if lhs.depthWidth != rhs.depthWidth {return false}
    if lhs.depthHeight != rhs.depthHeight {return false}
    if lhs.pose != rhs.pose {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
